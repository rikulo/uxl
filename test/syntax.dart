//Auto-generated by UXL Compiler
//Source: test/syntax.xml


library foo;

import 'package:rikulo/view.dart';


///A template.
class Inputs {
  ///Creates and returns views defined in this template.
  List<View> create({parent, friends, zoo}) {
    List<View> _vcr_ = new List();
    var current;
    final _v0_ = current = new View()
      ..layout.text = '''type: linear; orient: vertical'''
      ..style.cssText = '''border: 2px solid #333''';
    if (parent != null)
      parent.addChild(_v0_);
    _vcr_.add(_v0_);

    final _v0_0_ = current = new InputHead().create(
      parent: _v0_,
      label: '''Form''');

    for (final each in ['text', 'password', 'multiline', 'number', 'date', 'color']) {
      final _v0_1_ = current = new View()
        ..layout.text = '''type: linear; align: center; spacing: 0 3'''
        ..classes.add("foo1")
        ..classes.add("foo2");
      _v0_.addChild(_v0_1_);

      if (each != 'multiline') {
        final _v0_1_0_ = current = new TextBox()
          ..type = each;
        _v0_1_.addChild(_v0_1_0_);

      }

      if (each == 'multiline') {
        final _v0_1_1_ = current = new MultilineBox();
        _v0_1_.addChild(_v0_1_1_);

      }

    }

    final _v1_ = current = new ListView()
      ..model = friends
      ..dataAttributes["detail"] = new InputDetail()
      ..dataAttributes["header"] = new InputHeader();
    if (parent != null)
      parent.addChild(_v1_);
    _vcr_.add(_v1_);

    final _v1_0_ = current = new View()
      ..layout.text = '''type: linear; orient: vertical''';
    _v1_.addChild(_v1_0_);

    for (final animal in zoo.animals) {
      final _v1_0_0_ = current = new MagicBox().create(
        parent: _v1_0_,
        owner: animal);

    }

    final _v1_0_1_ = current = new TextView()
      ..html = '''
      ${friends[0]}
      <ul>
        <li>abc</li>
        <li>xyz</li>
      </ul>''';
    _v1_0_.addChild(_v1_0_1_);

    (new MagicControl()).apply(_v1_0_);
    return _vcr_;
  }
}

//used to make the generated dart error free
class MagicBox {
  List<View> create({parent, owner}) => new List();
}
class InputHead {
  List<View> create({parent, label}) => new List();
}
class InputHeader {
}
class ListView extends View {
  var model;
}
class ListHead extends View {
  String label;
  String image;
}
class MagicControl {
  void apply(View view) {
  }
}


///A template.
class InputDetail {
  ///Creates and returns views defined in this template.
  List<View> create({parent, each}) {
    List<View> _vcr_ = new List();
    var current;
    final _v0_ = current = new ListHead()
      ..label = each.name
      ..image = each.photo;
    if (parent != null)
      parent.addChild(_v0_);
    _vcr_.add(_v0_);

    final _v1_ = current = new InputHead().create(
      parent: parent,
      label: each.description);
    _vcr_.addAll(_v1_);

    return _vcr_;
  }
}
